import { test, expect } from "vitest";
import { createMockFactory } from "@prismicio/mock";
import * as fs from "node:fs/promises";
import * as path from "node:path";

import { expectGlobalContentTypes } from "./__testutils__/expectGlobalContentTypes";

/**
 * !!! DO NOT use this mock factory in tests !!!
 *
 * @remarks
 * Its seed is not specific to be used outside the most general cases.
 */
const mock = createMockFactory({ seed: import.meta.url });

// Slice model to be used in general tests.
const oldModel = mock.model.sharedSlice({
	id: "bar_baz",
	name: "QuxQuux",
	variations: [mock.model.sharedSliceVariation()],
});

// Slice model to be used in general tests.
const newModel = mock.model.sharedSlice({
	id: "bar_baz",
	name: "NewModel",
	variations: [mock.model.sharedSliceVariation()],
});

test("renames the Slice directory", async (ctx) => {
	await ctx.pluginRunner.callHook("slice:create", {
		libraryID: "slices",
		model: oldModel,
	});
	await ctx.pluginRunner.callHook("slice:rename", {
		libraryID: "slices",
		model: newModel,
	});

	expect(
		await fs.readdir(path.join(ctx.project.root, "slices", "NewModel")),
	).toStrictEqual(["index.vue", "model.json"]);
});

test("updates the Slice in the library index", async (ctx) => {
	await ctx.pluginRunner.callHook("slice:create", {
		libraryID: "slices",
		model: oldModel,
	});

	const beforeContents = await fs.readFile(
		path.join(ctx.project.root, "slices", "index.js"),
		"utf8",
	);

	expect(beforeContents).toMatchInlineSnapshot(`
		"// Code generated by Slice Machine. DO NOT EDIT.

		export const components = {
		  bar_baz: () =>
		    import(
		      /* webpackChunkName: prismic.slices.bar_baz */ \\"./QuxQuux/index.vue\\"
		    ),
		};
		"
	`);

	await ctx.pluginRunner.callHook("slice:rename", {
		libraryID: "slices",
		model: newModel,
	});

	const afterContents = await fs.readFile(
		path.join(ctx.project.root, "slices", "index.js"),
		"utf8",
	);
	expect(afterContents).toMatchInlineSnapshot(`
		"// Code generated by Slice Machine. DO NOT EDIT.

		export const components = {
		  bar_baz: () =>
		    import(
		      /* webpackChunkName: prismic.slices.bar_baz */ \\"./NewModel/index.vue\\"
		    ),
		};
		"
	`);
});

test("global types file contains new model", async (ctx) => {
	await ctx.pluginRunner.callHook("slice:create", {
		libraryID: "slices",
		model: oldModel,
	});
	await ctx.pluginRunner.callHook("slice:rename", {
		libraryID: "slices",
		model: newModel,
	});

	await expectGlobalContentTypes(ctx, {
		generateTypesConfig: {
			sharedSliceModels: [newModel],
		},
	});
});
